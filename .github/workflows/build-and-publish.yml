name: Build Rostoc (from private repo) and publish updates

on:
  workflow_dispatch:
    inputs:
      private_ref:
        description: 'Branch, tag, or SHA to build from private repo'
        required: false
        default: 'main'
  repository_dispatch:
    types: [trigger-build]
  schedule:
    - cron: "0 2 * * *"   # Optional nightly build at 2 AM UTC

permissions:
  contents: write         # Push updates to this repo
  pages: write            # Deploy Pages
  id-token: write         # OIDC for Pages

env:
  PRIVATE_REPO: ForteStudio/coro
  UPDATES_DIR: updates
  VERSION_FILE: version.txt
  PYTAURI_GEN_TS: 0
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

jobs:
  build-macos:
    runs-on: macos-14
    timeout-minutes: 50
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      tarball: ${{ steps.prepare_artifacts.outputs.tarball }}
      signature: ${{ steps.prepare_artifacts.outputs.signature }}
    steps:
      # --- Checkout this updates repo ---
      - name: Checkout updates repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: updates-repo

      # --- SSH method to read the private repo ---
      - name: Setup SSH agent for private repo
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_REPO_SSH_KEY }}

      - name: Add GitHub to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout private repo (read-only)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRIVATE_REPO }}
          ref: ${{ github.event.inputs.private_ref || github.event.client_payload.ref || 'main' }}
          ssh-key: ${{ secrets.PRIVATE_REPO_SSH_KEY }}
          path: private-src
          fetch-depth: 0

      # --- Setup toolchains ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack (pnpm)
        run: corepack enable

      - name: Derive pnpm store path
        id: pnpm-store
        shell: bash
        run: |
          set -euo pipefail
          cd private-src
          echo "[INFO] pnpm version: $(pnpm --version || true)" >&2
          STORE_PATH=$(pnpm store path 2>/dev/null | tr -d '\r' || true)
          if [ -z "${STORE_PATH}" ]; then
            echo "[WARN] pnpm store path empty; falling back to default ~/.pnpm-store" >&2
            STORE_PATH="$HOME/.pnpm-store"
          fi
          mkdir -p "$STORE_PATH" || true
          echo "Using STORE_PATH=$STORE_PATH" >&2
          echo "STORE_PATH=$STORE_PATH" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('private-src/pnpm-lock.yaml') }}
          restore-keys: pnpm-${{ runner.os }}-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install sccache
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/v0.7.7/sccache-v0.7.7-x86_64-apple-darwin.tar.gz -o sccache.tgz
          tar -xzf sccache.tgz --strip-components=1
          sudo mv sccache /usr/local/bin/sccache
          export SCCACHE_DIR="$RUNNER_TEMP/sccache"
          mkdir -p "$SCCACHE_DIR"
          echo "SCCACHE_DIR=$SCCACHE_DIR" >> $GITHUB_ENV

      - name: Cache Rust (registry + git + sccache)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cache/sccache
          key: rust-${{ runner.os }}-${{ hashFiles('private-src/**/Cargo.lock') }}
          restore-keys: rust-${{ runner.os }}-

      # --- Build Rostoc ---
      - name: Download embedded Python
        working-directory: private-src
        run: bash scripts/macos/download-py.sh

      - name: Assemble staged runtime
        working-directory: private-src
        run: bash scripts/assemble_runtime.sh

      - name: Install JS dependencies
        working-directory: private-src
        run: pnpm install --frozen-lockfile

      - name: Extract version
        id: extract_version
        working-directory: private-src
        run: |
          set -euo pipefail
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "[INFO] Building version: $VERSION"

      - name: Build application (with signing)
        working-directory: private-src
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          RUSTC_WRAPPER: sccache
          SCCACHE_DIR: ${{ env.SCCACHE_DIR }}
          SCCACHE_CACHE_SIZE: 2G
          ALLOW_PARTIAL_BUNDLE: 1
        run: |
          set -euo pipefail
          # Prevent code leaks in logs - disable command echoing for sensitive parts
          set +x
          bash scripts/macos/build.sh
          set -x
          sccache --show-stats || true

      - name: Verify app bundle
        working-directory: private-src
        run: bash scripts/verify_app_bundle.sh

      - name: Locate updater artifacts
        id: locate
        working-directory: private-src
        run: |
          set -euo pipefail
          # Prefer bundle-release profile artifacts
          TARBALL=$(find target/bundle-release/bundle/macos -name 'Rostoc.app.tar.gz' -print -quit 2>/dev/null || true)
          if [[ -z "$TARBALL" ]]; then
            TARBALL=$(find target/bundle-release/bundle/macos -name 'Coro.app.tar.gz' -print -quit 2>/dev/null || true)
          fi
          if [[ -z "$TARBALL" ]]; then
            TARBALL=$(find target/bundle-release/bundle/macos -name '*.app.tar.gz' -print -quit 2>/dev/null || true)
          fi
          
          SIG_FILE=""
          if [[ -n "$TARBALL" ]]; then
            SIG_FILE="${TARBALL}.sig"
          fi
          
          echo "Tarball: $TARBALL" >&2
          echo "Signature: $SIG_FILE" >&2
          
          if [[ -z "$TARBALL" ]]; then echo 'Missing updater tarball (.app.tar.gz)'; exit 1; fi
          if [[ -z "$SIG_FILE" || ! -f "$SIG_FILE" ]]; then
            echo 'Missing updater signature (.app.tar.gz.sig)'; exit 1
          fi
          
          echo "tarball=$TARBALL" >> $GITHUB_OUTPUT
          echo "signature=$SIG_FILE" >> $GITHUB_OUTPUT

      - name: Prepare update bundle
        id: prepare_artifacts
        working-directory: private-src
        run: |
          set -euo pipefail
          TARBALL="${{ steps.locate.outputs.tarball }}"
          SIGNATURE="${{ steps.locate.outputs.signature }}"
          VERSION="${{ steps.extract_version.outputs.version }}"
          
          # Create updates directory
          mkdir -p "../${{ env.UPDATES_DIR }}/macos"
          
          # Copy artifacts with version-tagged names
          TARBALL_NAME="Rostoc-${VERSION}-darwin-aarch64.app.tar.gz"
          cp "$TARBALL" "../${{ env.UPDATES_DIR }}/macos/$TARBALL_NAME"
          cp "$SIGNATURE" "../${{ env.UPDATES_DIR }}/macos/${TARBALL_NAME}.sig"
          
          # Also copy as latest for convenience
          cp "$TARBALL" "../${{ env.UPDATES_DIR }}/macos/Rostoc.app.tar.gz"
          cp "$SIGNATURE" "../${{ env.UPDATES_DIR }}/macos/Rostoc.app.tar.gz.sig"
          
          # Stamp version file
          date -u +"%Y-%m-%dT%H:%M:%SZ" > "../${{ env.UPDATES_DIR }}/${{ env.VERSION_FILE }}"
          echo "version=${VERSION}" >> "../${{ env.UPDATES_DIR }}/${{ env.VERSION_FILE }}"
          echo "git_sha=$(git rev-parse --short HEAD)" >> "../${{ env.UPDATES_DIR }}/${{ env.VERSION_FILE }}"
          
          # Generate checksums
          (cd "../${{ env.UPDATES_DIR }}/macos" && shasum -a 256 *.tar.gz > checksums.txt)
          
          echo "tarball_name=$TARBALL_NAME" >> $GITHUB_OUTPUT

      - name: Generate latest.json
        working-directory: updates-repo
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          TARBALL_NAME: ${{ steps.prepare_artifacts.outputs.tarball_name }}
        run: |
          set -euo pipefail
          
          # Read signature
          SIG=$(cat "../${{ env.UPDATES_DIR }}/macos/${TARBALL_NAME}.sig")
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          NOTES="Release ${VERSION}"
          URL="https://alain1405.github.io/rostoc-updates/macos/${TARBALL_NAME}"
          
          # Generate latest.json
          jq -n \
            --arg v "$VERSION" \
            --arg sig "$SIG" \
            --arg date "$DATE" \
            --arg notes "$NOTES" \
            --arg url "$URL" \
            '{
              version: $v,
              notes: $notes,
              pub_date: $date,
              platforms: {
                "darwin-aarch64": {
                  url: $url,
                  signature: $sig
                }
              }
            }' > "../${{ env.UPDATES_DIR }}/latest.json"
          
          echo 'Generated latest.json:'
          cat "../${{ env.UPDATES_DIR }}/latest.json"

      - name: Upload artifacts for Pages deployment
        uses: actions/upload-artifact@v4
        with:
          name: rostoc-updates
          path: ${{ env.UPDATES_DIR }}/*

  publish-to-pages:
    needs: build-macos
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout updates repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rostoc-updates
          path: updates

      - name: Commit & push updates (optional - for history)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add updates || true
          if ! git diff --cached --quiet; then
            git commit -m "chore: publish updates v${{ needs.build-macos.outputs.version }} ($(date -u +%F))"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: updates

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.build-macos.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Updates URL:** https://alain1405.github.io/rostoc-updates/latest.json" >> $GITHUB_STEP_SUMMARY
          echo "**Pages URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
